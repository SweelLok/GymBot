# –Ü–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import asyncio
import logging
import sys
import json

# –Ü–º–ø–æ—Ä—Ç –ø—ñ–¥-–±—ñ–±–ª—ñ–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.client.session.aiohttp import AiohttpSession

# –Ü–º–ø–æ—Ä—Ç —Ñ–∞–π–ª—ñ–≤ –∑ –ü–ö
from models import Plan, Power
from config import BOT_TOKEN as TOKEN
from keyboards import (PlanCallBack, plan_keyboard_markup)
from functions import get_plan, get_power, change_power, user_exists, add_user_if_not_exists
from commands import (
    PLAN_COMMAND,
    POWER_COMMAND,
    CHANGE_POWER,
    START_BOT_COMMAND,
    SHOW_PLAN_COMMAND,
    SHOW_POWER_COMMAND,
    CHANGE_POWER_COMMAND,
)
from state import PowerForm

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞
session = AiohttpSession(proxy='http://proxy.server:3128')


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
@dp.message(PLAN_COMMAND)
async def plan(message: Message) -> None:
    user_id = message.from_user.id
    if not user_exists(user_id):
        await message.answer("–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
        return
    data = get_plan()
    markup = plan_keyboard_markup(plans_list=data)
    await message.answer(f"–û—Å—å –≤–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=markup)


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –ø–ª–∞–Ω–æ–º
@dp.callback_query(PlanCallBack.filter())
async def calb_plans(callback: CallbackQuery, callback_data: PlanCallBack) -> None:
    plan_id = callback_data.id
    try:
        user_id = callback.from_user.id
        if not user_exists(user_id):
            await callback.answer("–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
            return

        plan_data = get_plan(plan_id=plan_id)
        if not plan_data:
            await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–ª–∞–Ω.", show_alert=True)
            return

        plan = Plan(**plan_data)
        text = (
            f"–î–µ–Ω—å: {plan.name}\n"
            f"–°–ø–ª—ñ—Ç: {plan.split}\n"
            f"–í–ø—Ä–∞–≤–∏: {plan.exercise}"
        )

        reply_markup = callback.message.reply_markup
        await callback.message.edit_text(text, reply_markup=reply_markup)
        await callback.answer()

    except TypeError as e:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö –ø–ª–∞–Ω—É.", show_alert=True)
        print(f"–ü–æ–º–∏–ª–∫–∞ TypeError: {e}")
    except Exception as e:
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∏–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
@dp.message(POWER_COMMAND)
async def show_power(message: Message) -> None:
    user_id = message.from_user.id
    powers = get_power()
    user_power_data = None
    for power in powers:
        if power["id"] == user_id:
            user_power_data = power
            break
    if not user_power_data:
        await message.answer("–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
        return

    strengths = user_power_data.get("strengths", {})
    keys = {
        "–∂–∏–º –ª–µ–∂–∞—á–∏": "benchpress",
        "–≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è": "pushups",
        "–ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è": "pullingup",
        "–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è": "squatting",
        "—Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º": "frechpress",
        "—à—Ç–∞–Ω–≥–∞ –Ω–∞ –±—ñ—Ü–µ–ø—Å": "onbiceps"
    }

    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥
    print("–°–∏–ª–∏:", strengths)  # –í–∏–≤–æ–¥–∏—Ç—å –≤–º—ñ—Å—Ç strengths

    if strengths:
        response_text = "–í–∞—à—ñ —Å–∏–ª–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:\n\n"

        for display_key, actual_key in keys.items():
            if actual_key in strengths:
                value = strengths[actual_key]
                response_text += f"{display_key}: {value}\n"

        await message.answer(response_text)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–ª–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏.")


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å–∏–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
@dp.message(CHANGE_POWER)
async def power_change(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if not user_exists(user_id):
        await message.answer("–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
        return

    await state.set_state(PowerForm.benchpress)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É, —è–∫—É –≤–∏ –∂–º–µ—Ç–µ (–∂–∏–º –ª–µ–∂–∞—á–∏)", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏ –¥–ª—è –∂–∏–º—É –ª–µ–∂–∞—á–∏
@dp.message(PowerForm.benchpress)
async def power_benchpress(message: Message, state: FSMContext) -> None:
    await state.update_data(benchpress=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–∂–∏–º–∞–Ω—å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PowerForm.pushups)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–∂–∏–º–∞–Ω—å
@dp.message(PowerForm.pushups)
async def power_pushups(message: Message, state: FSMContext) -> None:
    await state.update_data(pushups=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω—å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PowerForm.pullingup)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω—å
@dp.message(PowerForm.pullingup)
async def power_pullingup(message: Message, state: FSMContext) -> None:
    await state.update_data(pullingup=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏—Å—ñ–¥–∞–Ω—å", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PowerForm.squatting)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–∏—Å—ñ–¥–∞–Ω—å
@dp.message(PowerForm.squatting)
async def power_squatting(message: Message, state: FSMContext) -> None:
    await state.update_data(squatting=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É, —è–∫—É –≤–∏ –∂–º–µ—Ç–µ (—Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π –∂–∏–º)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PowerForm.frechpress)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏ –¥–ª—è —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ–≥–æ –∂–∏–º—É
@dp.message(PowerForm.frechpress)
async def power_frechpress(message: Message, state: FSMContext) -> None:
    await state.update_data(frechpress=message.text)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É, —è–∫—É –≤–∏ –ø—ñ–¥–Ω—ñ–º–∞—î—Ç–µ (—à—Ç–∞–Ω–≥–∞ –Ω–∞ –±—ñ—Ü–µ–ø—Å)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(PowerForm.onbiceps)


# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏ –¥–ª—è –ø—ñ–¥–π–æ–º—É –Ω–∞ –±—ñ—Ü–µ–ø—Å
@dp.message(PowerForm.onbiceps)
async def power_onbiceps(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    data["onbiceps"] = message.text
    user_id = message.from_user.id
    power_data = Power(**data)
    change_power(power_data.model_dump(), user_id)
    await state.clear()
    await message.answer(f"–°–∏–ª–æ–≤—ñ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç—É –±–æ—Ç–∞
@dp.message(CommandStart)
async def start(message: Message) -> None:
    add_user_if_not_exists(message.from_user.id, message.from_user.full_name)
    await message.answer(
        f"–í—ñ—Ç–∞—é, {message.from_user.full_name}!üëã\n"
        f"\n"
        f"–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ç–≤—ñ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        f"–¢–∞–∫–æ–∂ —Ç–∏ –∑–º–æ–∂–µ—à —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –∑–º—ñ–Ω–æ—é —Ç–≤–æ—ó—Ö —Å–∏–ª–æ–≤–∏—Öüí™"
    )


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main() -> None:
    bot = Bot(token=TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    await bot.set_my_commands([
        START_BOT_COMMAND,
        SHOW_PLAN_COMMAND,
        SHOW_POWER_COMMAND,
        CHANGE_POWER_COMMAND,
    ])

    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
